{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport const useFetch = requestConfig => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequests = async taskText => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.URL, {\n        method: requestConfig.method,\n        headers: requestConfig.headers,\n        body: JSON.stringify(requestConfig.body)\n      });\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n      const data = await response.json();\n      const loadedTasks = [];\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n};\n_s(useFetch, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");","map":{"version":3,"names":["useState","useFetch","requestConfig","isLoading","setIsLoading","error","setError","sendRequests","taskText","response","fetch","URL","method","headers","body","JSON","stringify","ok","Error","data","json","loadedTasks","taskKey","push","id","text","setTasks","err","message"],"sources":["C:/Web/2023/tasks-firebase/src/Hooks/fetch-hook.js"],"sourcesContent":["import {useState} from \"react\";\r\n\r\nexport const useFetch = (requestConfig) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const sendRequests = async (taskText) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch( requestConfig.URL , {\r\n                method: requestConfig.method,\r\n                headers: requestConfig.headers,\r\n                body: JSON.stringify(requestConfig.body)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n\r\n            const loadedTasks = [];\r\n\r\n            for (const taskKey in data) {\r\n                loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n            }\r\n\r\n            setTasks(loadedTasks);\r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n}"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,OAAO,MAAMC,QAAQ,GAAIC,aAAa,IAAK;EAAA;EAEvC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMO,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACrCJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAER,aAAa,CAACS,GAAG,EAAG;QAC9CC,MAAM,EAAEV,aAAa,CAACU,MAAM;QAC5BC,OAAO,EAAEX,aAAa,CAACW,OAAO;QAC9BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,aAAa,CAACY,IAAI;MAC3C,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACtC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAGlC,MAAMC,WAAW,GAAG,EAAE;MAEtB,KAAK,MAAMC,OAAO,IAAIH,IAAI,EAAE;QACxBE,WAAW,CAACE,IAAI,CAAC;UAAEC,EAAE,EAAEF,OAAO;UAAEG,IAAI,EAAEN,IAAI,CAACG,OAAO,CAAC,CAACG;QAAK,CAAC,CAAC;MAC/D;MAEAC,QAAQ,CAACL,WAAW,CAAC;IACzB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACVrB,QAAQ,CAACqB,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IACpD;IACAxB,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;AACL,CAAC;AAAA,GAlCYH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}